import bpy
import os
import time
import json

from bpy.types              import Operator
from bpy.props              import IntProperty

from ..text.text            import get_blend_data
from .generic               import wrap_text

class VRT_OT_NotificationDisplay(Operator):
    """Displays a list of notifications from VRT"""
    bl_idname = "wm.notification_display"
    bl_label = "VRT Notifications"
    bl_options = {'REGISTER', 'UNDO'}


    notifications_sorted = []


    def execute(self, context):
        data = get_blend_data()

        self.notifications_sorted.clear()
        self.notifications_sorted = sorted(data.vrt.notifications, key=lambda notification: notification.timestamp, reverse=True)

        data.vrt.notification_alert = False

        return context.window_manager.invoke_popup(self, width=600)


    def draw(self, context):
        data = get_blend_data()
        layout = self.layout

        layout.label(text="VRT Notifications", icon='INFO')

        if len(self.notifications_sorted) < 1:
            layout.separator(factor=1.0)
            layout.label(text="VRT has not generated any notifications so far.")
        else:
            split = layout.split(factor=0.75)
            split.label(text="This list displays the last 50 notifications generated by VRT.")
            split.operator('wm.clear_notification', icon='REMOVE')
            row = layout.row()
            split = row.split(factor=0.6)
            split = row.split(factor=0.8)
            split.label(text="")
            split.prop(data.vrt, 'display_errors', icon='CANCEL', text="")
            split.prop(data.vrt, 'display_warnings', icon='ERROR', text="")
            split.prop(data.vrt, 'display_infos', icon='INFO', text="")
            layout.separator(factor=1.0)

        for notification in self.notifications_sorted:

            index = self.notifications_sorted.index(notification)

            if notification.notification_type == 'ERROR' and not data.vrt.display_errors:
                continue
            if notification.notification_type == 'WARNING' and not data.vrt.display_warnings:
                continue
            if notification.notification_type == 'INFO' and not data.vrt.display_infos:
                continue

            box = layout.box()

            split = box.split(factor=0.025)
            row = split.row()
            if notification.notification_type == 'ERROR':
                row.alert = True
            elif notification.notification_type == 'INFO':
                row.active = False
            row.label(text=str(index + 1))

            split = split.split(factor=0.70)
            row = split.row()
            if notification.notification_type == 'INFO':
                row.active = False

            if notification.notification_type == 'ERROR':
                row.alert = True
                icon = 'CANCEL'
            elif notification.notification_type == 'WARNING':
                icon = 'ERROR'
            else:
                icon = 'INFO'
            row.label(text=notification.notification_type, icon=icon)
            row.label(text=notification.code)
            row.label(text=time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(notification.timestamp)))

            col = box.column()
            if notification.notification_type == 'ERROR':
                col.alert = True

            for text in wrap_text(notification.text, 110):
                row = col.row()
                row.scale_y = 0.75
                if notification.notification_type == 'INFO':
                    row.active = False
                row.label(text=text)

            split = split.split(factor=0.85)
            row = split.row()
            if notification.notification_type == 'ERROR':
                row.alert = True
            if notification.notification_type == 'ERROR' or notification.notification_type == 'WARNING':
                docu = row.operator('wm.docu_link', text="How to Fix", icon='INFO')
                docu.section = 'Tools/VRT/'
                docu.page = 'Notifications/'
                docu.code = notification.code

            op = split.operator('wm.delete_notification', icon='REMOVE', text="", emboss=False)
            op.idx = index

        layout.separator(factor=1.0)
        split = layout.split(factor=0.75)
        split.label(text="Should no relevant error be listed here, please check the Blender System Console:")
        split.operator('wm.console_toggle', icon='CONSOLE')


class VRT_OT_DeleteNotification(Operator):
    """Delete specific notification"""
    bl_idname = "wm.delete_notification"
    bl_label = "Delete Notification"
    bl_options = {'REGISTER', 'UNDO'}


    idx: IntProperty()


    def execute(self, context):

        data = get_blend_data()

        for index in range(0, len(data.vrt.notifications)):
            if data.vrt.notifications[index] == self.notifications_sorted[self.idx]:
                data.vrt.notifications.remove(index)
                break

        self.notifications_sorted.clear()
        self.notifications_sorted = sorted(data.vrt.notifications, key=lambda notification: notification.timestamp, reverse=True)

        return {'FINISHED'}


class VRT_OT_ClearnNotification(Operator):
    """Clears all current notifications"""
    bl_idname = "wm.clear_notifications"
    bl_label = "Clear Notification"
    bl_options = {'REGISTER', 'UNDO'}


    def execute(self, context):

        data = get_blend_data()
        data.vrt.notifications.clear()
        self.notifications_sorted.clear()

        return {'FINISHED'}


def display_notification(context, notification_type: str, code: str, variables: list = []):

    json_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'assets', 'notifications.json')

    #with open(json_path) as json_file:
    #    data = json.load(json_file)

    data = {
        "ERROR": {
            "E001": "This {} is a test {} error."
        },
        "WARNING": {
            "W001": ""
        },
        "INFO": {
            "I001": ""
        }
    }

    text = data[notification_type][code]
    text = text.format(*variables)

    if notification_type == 'ERROR':
        show_popup(context, "Report: Error", text)
        print(f"VRT Error: {text} ({code})")
    elif notification_type == 'WARNING':
        print(f"VRT Warning: {text} ({code})")
    elif notification_type == 'INFO':
        print(f"VRT Info: {text} ({code})")

    add_to_notifications(context, notification_type, text, code)


def show_popup(context, title, text: str):
    """Displays a popup message that looks like an error report."""

    def draw(self, context):
        self.layout.label(text=text)

    context.window_manager.popup_menu(draw, title=title, icon='ERROR')


def add_to_notifications(context, notification_type: str, text: str, code: str):
    data = get_blend_data()
    notifications = data.vrt.notifications

    while len(notifications) > 49:
        oldest = None
        for index in range(0, len(notifications)):
            if oldest == None:
                oldest = index
            elif notifications[index].timestamp < oldest:
                oldest = index

        notifications.remove(oldest)

    notification = notifications.add()
    notification.timestamp = time.time()
    notification.notification_type = notification_type
    notification.text = text

    if code is not None:
        notification.code = code
    if notification_type == 'ERROR':
        data.vrt.notification_alert = True